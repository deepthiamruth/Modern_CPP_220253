3 major parts
1) optimization of code to reduce multiple points of return in the function
2) how to make a priority queue
    a) Type of data to be fed to queue
    b) where data will be stored(back-end of queue)
    c) provide a callable item which can be used as a comparator
    A callable obj is anything which can be suffixed with () operator and invoked like a function
        e.g : a normal function void magic(); magic();
        auto fn = [](int val){std::cout << val;}; fn();

        Other examples:
        member functions of the class
        a functor object (a class where () operator is overloaded like we compare class today)
        a binded partial function created with a function in a class

        Note : you may or may not create an alias , doesn't matter
        
3) Unordered_set requires 3 things to be specified
    a) type of data to be stored in hashtable i.e KEY
    b) a "callable" object that can be used for "hashing" (as a hash function)
    c) a "callable" object that can be used for equality check for duplicate identi

    Note:
        a) A lambda must be declared in header but initialized in cpp file
            (We can use extern keyword for this)
                     or
            we can inline the lambda in the header file [tricky!]
        b) A global function's decltype returns a function pointer, not an actual type
            don't use this in template parameters of Unordered_set
        c) ordering/ssequence matters in alias declaration
